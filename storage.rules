rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if request is from Admin SDK
    function isAdmin() {
      return request.auth == null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to validate image types
    function isValidImage() {
      return request.resource.contentType != null &&
             request.resource.contentType.matches('image/.*');
    }

    // Helper function to check file size (50MB max)
    function isValidSize() {
      return request.resource.size <= 50 * 1024 * 1024;
    }

    // User visuals: /users/{userId}/visuals/{projectId}/{visualId}/{fileName}
    match /users/{userId}/visuals/{projectId}/{visualId}/{fileName} {
      allow read: if isAdmin() || isOwner(userId);
      allow write: if isAdmin() || (isOwner(userId) && isValidImage() && isValidSize());
      allow delete: if isAdmin() || isOwner(userId);
    }

    // User thumbnails: /users/{userId}/thumbnails/{projectId}/{visualId}
    match /users/{userId}/thumbnails/{projectId}/{visualId} {
      allow read: if isAdmin() || isOwner(userId);
      allow write: if isAdmin() || (isOwner(userId) && isValidImage() && request.resource.size <= 5 * 1024 * 1024);
      allow delete: if isAdmin() || isOwner(userId);
    }

    // Temp files: /temp/{fileName}
    match /temp/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isValidImage() && isValidSize();
      allow delete: if request.auth != null;
    }

    // System files - Admin only
    match /system/{allPaths=**} {
      allow read, write: if false;
    }

    // Backup files - Admin only
    match /backups/{allPaths=**} {
      allow read, write: if false;
    }

    // Default deny for all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}